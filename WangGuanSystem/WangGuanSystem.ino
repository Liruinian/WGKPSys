#include <U8glib.h>
#include <DS3231.h>
#include <Wire.h>
DS3231 Clock;

const int button1 = 2;
const int button2 = 3;
const int button3 = 4;
int val = 0;
int old_val = 0;
int val2 = 0;
int old_val2 = 0;
int val3 = 0;
int old_val3 = 0;
int page = 0;
bool Century=false;
bool h12;
bool PM;
byte ADay, AHour, AMinute, ASecond, ABits;
bool ADy, A12h, Apm;
char output;

//byte year, month, date, DoW, hour, minute, second;
int second,minute,hour,date,month,year,temperature; 
void ReadDS3231()
{
  second=Clock.getSecond();
  minute=Clock.getMinute();
  hour=Clock.getHour(h12, PM);
  date=Clock.getDate();
  month=Clock.getMonth(Century);
  year=Clock.getYear();
  
  temperature=Clock.getTemperature();
}
static const unsigned char PROGMEM w[] ={0x00,0x00,0x7F,0xFC,0x40,0x04,0x40,0x04,0x42,0x14,0x52,0x94,0x4A,0x54,0x44,0x24,0x44,0x24,0x4A,0x54,0x4A,0x54,0x52,0x94,0x61,0x04,0x40,0x04,0x40,0x14,0x40,0x08};/*"网",0*/
static const unsigned char PROGMEM g[] ={0x20,0x40,0x3F,0x7E,0x48,0x90,0x85,0x08,0x01,0x00,0x7F,0xFE,0x40,0x02,0x9F,0xE4,0x10,0x20,0x1F,0xE0,0x10,0x00,0x1F,0xF0,0x10,0x10,0x10,0x10,0x1F,0xF0,0x10,0x10};/*"管",1*/
static const unsigned char PROGMEM k[] ={0x20,0x00,0x21,0xFC,0x7D,0x04,0x45,0x04,0x89,0xFC,0x7D,0x04,0x55,0x04,0x55,0xFC,0x7C,0x00,0x55,0x12,0x55,0xD4,0x7D,0x18,0x01,0x10,0x1D,0x52,0xE1,0x92,0x41,0x0E};/*"鲲",2*/
static const unsigned char PROGMEM p[] ={0x00,0x10,0x77,0x20,0x55,0x7C,0x55,0x44,0x55,0x64,0x77,0x54,0x55,0x44,0x55,0x4C,0x55,0x40,0x77,0x7E,0x55,0x02,0x55,0x02,0x55,0x7A,0xB5,0x02,0x89,0x0A,0x13,0x04};/*"鹏",3*/
static const unsigned char PROGMEM x[] ={0x00,0xF8,0x3F,0x00,0x04,0x00,0x08,0x20,0x10,0x40,0x3F,0x80,0x01,0x00,0x06,0x10,0x18,0x08,0x7F,0xFC,0x01,0x04,0x09,0x20,0x11,0x10,0x21,0x08,0x45,0x04,0x02,0x00};/*"系",7*/
static const unsigned char PROGMEM t[] ={0x10,0x40,0x10,0x20,0x20,0x20,0x23,0xFE,0x48,0x40,0xF8,0x88,0x11,0x04,0x23,0xFE,0x40,0x92,0xF8,0x90,0x40,0x90,0x00,0x90,0x19,0x12,0xE1,0x12,0x42,0x0E,0x04,0x00};/*"统",8*/

static const unsigned char PROGMEM wen[] ={0x0F,0x80,0x88,0x80,0x4F,0x80,0x08,0x80,0x0F,0x80,0x80,0x00,0x5F,0xC0,0x15,0x40,0x35,0x40,0x55,0x40,0x95,0x40,0x3F,0xE0};/*"温",0*/
static const unsigned char PROGMEM du[] ={0x02,0x00,0x7F,0xE0,0x48,0x80,0x7F,0xE0,0x48,0x80,0x4F,0x80,0x40,0x00,0x5F,0xC0,0x48,0x40,0x44,0x80,0x43,0x00,0x9C,0xE0};/*"度",1*/



static const unsigned char PROGMEM pic[] ={


0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0xFE,0xFF,0xFF,0xFF,
0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x02,0x00,0x00,0xFE,0xFF,0xFF,0xFF,
0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x82,0x14,0x00,0x00,0xFE,0xFF,0xFF,0xFF,
0x00,0x00,0x30,0x00,0x00,0x00,0x01,0x00,0xD1,0x2D,0x01,0x00,0xFE,0xFF,0xFF,0xFF,
0x00,0x00,0xF8,0x01,0x00,0x00,0x01,0x80,0xFF,0x99,0x07,0x00,0xFE,0xFF,0xFF,0xFF,
0x00,0x00,0xFC,0x63,0x00,0x0C,0x01,0xC0,0xFF,0x17,0x17,0x00,0xFE,0xFF,0xFF,0xFF,
0x00,0x00,0xFC,0x37,0xC0,0x13,0x01,0xB0,0xFF,0xFF,0x07,0x00,0xFE,0xFF,0xFF,0xFF,
0x00,0x00,0xFC,0x0F,0xF0,0x0B,0x01,0xF8,0xFF,0xFF,0x1F,0x00,0xFE,0xFF,0xFF,0xFF,
0x00,0x00,0xFC,0x07,0xFF,0x07,0x01,0xFC,0xFF,0xFF,0x3F,0x00,0x3E,0x80,0x3B,0xFF,
0x00,0x00,0xFC,0x87,0x0F,0x02,0x01,0xCC,0xFF,0xFF,0x3F,0x00,0x3E,0x80,0x01,0xF8,
0x00,0x80,0xFC,0xC3,0x07,0x0B,0x01,0xE0,0xF7,0xFF,0xFF,0x01,0xBE,0x8D,0x95,0xFE,
0x00,0x80,0xFF,0xE3,0x03,0x1B,0x01,0xFC,0xF3,0xFF,0xFF,0x07,0x3E,0xA0,0x01,0xFC,
0x00,0x00,0xFC,0xFB,0x83,0x1B,0x01,0xFE,0xF9,0xFF,0xFF,0x01,0xBE,0xA4,0x01,0xFC,
0x00,0x00,0xFF,0xFF,0xC0,0x03,0x01,0xF7,0xFC,0xFF,0xFF,0x03,0xBE,0xAC,0xF3,0xFE,
0x00,0xE0,0xFB,0xFF,0xE6,0x07,0x01,0xFE,0xFA,0xFF,0xFF,0x03,0xBE,0x80,0x03,0xFE,
0x00,0xF0,0xD9,0xFF,0xF3,0x03,0x01,0x7E,0xFC,0xCF,0xFF,0x00,0xBE,0x94,0x03,0xFE,
0x00,0xF0,0xFC,0xFF,0xF9,0x01,0x01,0x5F,0xDC,0xCF,0xFF,0x00,0x3E,0xB3,0xF3,0xFE,
0x00,0x78,0xFF,0xFF,0xFF,0x00,0x01,0x7F,0xF8,0x9F,0xFF,0x00,0xBE,0x8F,0x03,0xFE,
0x00,0x38,0xFF,0x9F,0xFF,0x00,0x01,0xFE,0xB8,0x1F,0xFF,0x00,0xFE,0xFF,0xFF,0xFF,
0x00,0x98,0xFF,0x3F,0x7E,0x00,0x01,0x0E,0xFD,0x7F,0xFF,0x00,0xFE,0xFF,0xFF,0xFF,
0x00,0xDC,0xFC,0x7F,0x5F,0x00,0x01,0x1F,0xFD,0x3B,0xFE,0x00,0xFE,0xFF,0xFF,0xFF,
0x00,0x7C,0xFE,0xFF,0x4F,0x00,0x81,0x1F,0xFF,0x3F,0xFE,0x00,0xFE,0xFF,0xFF,0xFF,
0x00,0x38,0xFE,0xFF,0x0F,0x00,0x01,0xBF,0xFF,0x3F,0x3C,0x00,0xFE,0xFF,0xFF,0xFF,
0x00,0x00,0xFF,0xFF,0x27,0x00,0x01,0xF8,0xFF,0x3F,0x0C,0x01,0xFE,0xFF,0xFF,0xFF,
0x00,0x80,0xFF,0xFF,0x33,0x02,0x01,0xFC,0xFE,0x7F,0xC0,0x01,0xFE,0xFF,0xFF,0xFF,
0x00,0xD0,0xFF,0xFF,0x31,0x01,0x01,0xFF,0xFF,0x7F,0xC0,0x01,0xFE,0xFF,0xFF,0xFF,
0x00,0xD0,0xF5,0x7D,0x9C,0x00,0x01,0xCE,0xFF,0xFF,0x80,0x00,0xFE,0xFF,0xFF,0xFF,
0x00,0x90,0xF9,0x7E,0xDF,0x00,0x01,0xD8,0xFF,0xFF,0x01,0x00,0xFE,0xFF,0xFF,0xFF,
0x00,0xE0,0x78,0xBE,0x6F,0x00,0x01,0xB8,0xF9,0xFF,0x4F,0x00,0xBE,0xB0,0x79,0xFC,
0x00,0xE4,0x3C,0xFE,0x17,0x00,0x01,0x7C,0xFD,0xF8,0x4F,0x00,0x3E,0x90,0x73,0xFD,
0x00,0xF6,0x1D,0xFF,0x07,0x00,0x01,0xFC,0xFC,0xF9,0x0F,0x00,0xBE,0x92,0x0B,0xF8,
0x00,0xC3,0x8E,0xFF,0x07,0x00,0x01,0xFC,0xED,0x78,0x0F,0x00,0x9E,0x92,0x78,0xFE,
0x00,0x01,0xCE,0x7F,0x07,0x00,0x01,0x2C,0xCE,0xF0,0x1F,0x00,0x3E,0x92,0x0B,0xFE,
0x00,0x00,0xEF,0xBF,0x03,0x00,0x01,0x3C,0xCE,0xFB,0x3E,0x00,0xFE,0x92,0x5B,0xFE,
0x00,0x80,0xE7,0xFF,0x03,0x00,0x01,0x19,0x06,0xFF,0x7C,0x01,0x7E,0x92,0x5B,0xFE,
0x00,0x80,0xF7,0xFF,0x09,0x00,0x01,0x10,0x06,0xFF,0xFC,0x01,0x3E,0x9D,0xD3,0xFA,
0x00,0xC0,0xFB,0x7F,0x0A,0x00,0x01,0x1D,0x06,0x7F,0x7C,0x01,0xBE,0xB1,0x03,0xFA,
0x80,0xF3,0xF9,0x1F,0x01,0x00,0x01,0x56,0x47,0x7F,0xFE,0x01,0x9E,0x86,0xEB,0xFC,
0x00,0xFF,0xF8,0xDF,0x00,0x00,0x01,0x7B,0x07,0x7B,0xFC,0x03,0xFE,0xFF,0xFF,0xFF,
0x00,0x7D,0xF8,0x7F,0x00,0x00,0x01,0x3F,0x6F,0x41,0xF8,0x06,0xFE,0xFF,0xFF,0xFF,
0x00,0x3E,0xDE,0x1F,0x00,0x00,0x81,0xFA,0x3F,0xED,0x59,0x00,0xFE,0xFF,0xFF,0xFF,
0x00,0x3C,0xFE,0x01,0x00,0x00,0x01,0xFE,0x67,0xFF,0x7F,0x00,0xFE,0xFF,0xFF,0xFF,
0x00,0x18,0xFE,0x00,0x00,0x00,0x01,0xFC,0xBF,0xFD,0xBF,0x00,0xFE,0xFF,0xFF,0xFF,
0x00,0x00,0xFE,0x00,0x00,0x00,0x01,0xFC,0xBF,0xFF,0xFF,0x01,0xFE,0xFF,0xFF,0xFF,
0x00,0x00,0x78,0x00,0x00,0x00,0x01,0xFB,0xFF,0xFF,0xFF,0x00,0xFE,0xFF,0xFF,0xFF,
0x00,0x00,0x78,0x00,0x00,0x00,0x01,0xFE,0x7F,0xFF,0xFF,0x02,0xFE,0xFF,0xFF,0xFF,
0x00,0x00,0x30,0x00,0x00,0x00,0x01,0x00,0xC0,0x00,0x00,0x00,0xFE,0xFF,0xFF,0xFF,
0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0xFE,0xFF,0xFF,0xFF,/*"D:\Desktop\无标题.bmp",0*/



};
#include "U8glib.h"
U8GLIB_SSD1306_128X64 u8g(U8G_I2C_OPT_NONE|U8G_I2C_OPT_DEV_0);	// I2C / TWI 

void draw(void) {
  switch(page) {
    case 0: menu(); break;
    case 1: mainm(); break;
    case 2: logo(); break;
  }
}
void mainm(void) {
  u8g.drawBitmapP(0+5,0+5,2,16,w);
  u8g.drawBitmapP(16+5,0+5,2,16,g);
  u8g.drawBitmapP(32+5,0+5,2,16,k);
  u8g.drawBitmapP(48+5,0+5,2,16,p);
  u8g.drawBitmapP(64+5,0+5,2,16,x);
  u8g.drawBitmapP(80+5,0+5,2,16,t);
//  u8g.drawBitmapP(0+5,16+5+5,2,16,q);
//  u8g.drawBitmapP(16,16+5+5,2,16,r);
//  u8g.drawBitmapP(32,16+5+5,2,16,s);
//  u8g.drawBitmapP(48,16+5+5,2,16,x);
//  u8g.drawBitmapP(64,16+5+5,2,16,t);
  u8g.setFont(u8g_font_6x12);
  u8g.setPrintPos(102, 16); 
  u8g.print("A0.2");
  u8g.setPrintPos(5, 30); 
  u8g.print("20");
  u8g.print(year,DEC);
  u8g.print('-');
  u8g.print(month,DEC);
  u8g.print('-');
  u8g.print(date,DEC);
  u8g.print(' ');
  u8g.print(hour,DEC);
  u8g.print(':');
  u8g.print(minute,DEC);
  u8g.print(':');
  u8g.print(second,DEC);
  u8g.drawBitmapP(5,32,2,12,wen);
  u8g.drawBitmapP(17,32,2,12,du);
  u8g.setPrintPos(30, 41); 
  u8g.print(temperature); 
  u8g.setFont(u8g_font_6x10);
  u8g.drawStr(5, 55, "2020.10.01-04");
  u8g.drawFrame(0,0,128,64);
}
void menu(void) {
  title();
//  u8g.drawFrame(15,15,26,41);
//  u8g.drawCircle(25,45,10);
//  u8g.drawFrame(15,30,40,26);
//  u8g.drawBox(25,30,16,16);
//  u8g.drawBox(15,46,10,10);
  u8g.drawXBMP(0,16,128,48,pic);
}
void title(void) {
  u8g.drawFrame(0,0,128,64);
  u8g.setFont(u8g_font_5x7);
  u8g.setPrintPos(4, 10); 
  u8g.print("20");
  u8g.print(year,DEC);
  u8g.print('-');
  u8g.print(month,DEC);
  u8g.print('-');
  u8g.print(date,DEC);
  u8g.print(' ');
  u8g.print(hour,DEC);
  u8g.print(':');
  u8g.print(minute,DEC);
  u8g.print(':');
  u8g.print(second,DEC);
  u8g.print(' ');
  u8g.print(temperature); 
  u8g.print('C');
}
void logo(void) {
  title();
  u8g.setPrintPos(4, 21); 
  u8g.setFont(u8g_font_7x13);
  u8g.print("WangGuanSystem");
  u8g.setPrintPos(4, 32); 
  u8g.setFont(u8g_font_6x10r);
  u8g.print("Based on Arduino Sin-");
  u8g.setPrintPos(4, 41); 
  u8g.print("gle Board Computer");
  u8g.setPrintPos(4, 50); 
  u8g.print("Made for a challenge");
  u8g.setPrintPos(4, 59); 
  u8g.print("4 days,make a system");
  
}
void setup(void) {
  // flip screen, if required
  // u8g.setRot180();
  Wire.begin();
  Serial.begin(9600);
  pinMode(button1, INPUT_PULLUP);
  pinMode(button2, INPUT_PULLUP);
  pinMode(button3, INPUT_PULLUP);
  page = 1;
//        Clock.setSecond(0);
//        Clock.setMinute(51);
//        Clock.setHour(18);
//        Clock.setDoW(7);
//        Clock.setDate(4);
//        Clock.setMonth(10);
//        Clock.setYear(20);
}
void loop(void) {
  delay(500);
  val = digitalRead(button1);
  if((val == HIGH)&&(old_val == LOW)){
    page = page + 1;
    if(page == 3){
      page = 0;
    }
  }
  old_val = val;
  val2 = digitalRead(button2);
  if((val2 == HIGH)&&(old_val2 == LOW)){
    page = page - 1;
    if(page == -1){
      page = 2;
    }
  }
  old_val2 = val2;
  val3 = digitalRead(button3);
  if((val3 == HIGH)&&(old_val3 == LOW)){
    page = 1;
  }
  old_val3 = val3;
  // picture loop
  u8g.firstPage();  
  do {
    draw();
  } while( u8g.nextPage() );
  ReadDS3231();
  // rebuild the picture after some delay
  Serial.print(page);
}
